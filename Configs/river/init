#!/usr/bin/env bash

sh "$HOME/.config/river/startup"

function spawn() { riverctl map -layout 0 normal $1 $2 spawn "$3"; }

# spawn shell command in recording mode
function rspawn() {
  riverctl map -layout 0 recording None $1 spawn "$2"
  riverctl map -layout 0 -release recording None $1 spawn "$MODRIVER exit"
}

# map river command in normal mode
function map() { riverctl map -layout 0 normal "$@"; }

# map river command in recording mode
function rmap() { riverctl map -layout 0 recording "$@"; }

# map mouse pointer in normal mode
function pointer() { riverctl map-pointer normal "$@"; }

# send command to tiler (in this case, wideriver)
function tiler() { riverctl map -layout 0 normal $1 $2 send-layout-cmd wideriver "$3"; }

# Add app rule
function ruleAdd() { riverctl rule-add -app-id "$@"; }

# Specify tags app will start on
function tags() {
  case $# in
  2)
    if [ "$2" != "all" ]; then
      ruleAdd "$1" tags $((1 << ($2 - 1)))
    else
      ruleAdd "$1" tags $(((1 << 32) - 1))
    fi
    ;;
  3)
    if [ "$3" != "all" ]; then
      ruleAdd "$1" -title "$2" tags $((1 << ($3 - 1)))
    else
      ruleAdd "$1" -title "$2" tags $(((1 << 32) - 1))
    fi
    ;;
  esac
}

# Floating windows
function float() {
  # If title field is 0
  if [ $2 -eq 0 ]; then
    [ $# -ge 2 ] && ruleAdd "$1" float
    [ $# -ge 4 ] && ruleAdd "$1" dimensions $3 $4
    if [ $# -ge 6 ]; then
      pos_x="$5"
      pos_y="$6"
      case $5 in
      center) pos_x="$((res_x / 2 - $3 / 2))" ;;
      right) pos_x="$((res_x - $3))" ;;
      left) pos_x="1" ;;
      esac
      case $6 in
      center) pos_y="$((res_y / 2 - $4 / 2))" ;;
      bottom) pos_y="$((res_y - $4))" ;;
      top) pos_y="1" ;;
      esac
      ruleAdd "$1" position $pos_x $pos_y
    fi
  else
    # If title is specified instead of 0
    [ $# -ge 2 ] && ruleAdd "$1" -title "$2" float
    [ $# -ge 4 ] && ruleAdd "$1" -title "$2" dimensions $3 $4
    if [ $# -ge 6 ]; then
      pos_x="$5"
      pos_y="$6"
      case $5 in
      center) pos_x="$((res_x / 2 - $3 / 2))" ;;
      right) pos_x="$((res_x - $3))" ;;
      left) pos_x="1" ;;
      esac
      case $6 in
      center) pos_y="$((res_y / 2 - $4 / 2))" ;;
      bottom) pos_y="$((res_y - $4))" ;;
      top) pos_y="1" ;;
      esac
      ruleAdd "$1" -title "$2" position $pos_x $pos_y
    fi
  fi
}

# Settings for all mouse pointers
function mouse_pointers {
  pointer_arr=($(riverctl list-inputs | grep --color=never pointer | xargs))
  for i in "${pointer_arr[@]}"; do
    riverctl input $i events enabled
    riverctl input $i tap enabled
    riverctl input $i drag enabled
    riverctl input $i drag-lock disabled
    riverctl input $i scroll-method edge
    riverctl input $i disable-while-typing enabled
    riverctl input $i tap-button-map left-right-middle
    riverctl input $i scroll-factor 1.5
  done
}

mouse_pointers

riverctl background-color 0x282828
riverctl border-color-focused 0x5e81ac
riverctl border-color-unfocused 0x4c556a
riverctl focus-follows-cursor "always"
# riverctl default-attach-mode "bottom"
riverctl set-repeat 50 300
riverctl keyboard-layout \
  -options grp:alt_shift_toggle \
  us,ir

riverctl spawn "dbus-update-activation-environment SEATD_SOCK DISPLAY WAYLAND _DISPLAY XDG_CURRENT_DESKTOP=river"
spawn Super Return kitty
spawn Super+Shift Return alacritty
spawn Super R anyrun
spawn Super D launcher
spawn Super X powermenu
spawn Super+Shift R "~/.config/river/init"
spawn Super B "~/.config/river/bar.sh"
spawn Super N "~/.config/river/wallpaper.sh"
# ------------------------------------
map Super C close
map Super+Shift E exit
map Super J focus-view next
map Super K focus-view previous
map Super+Shift J swap next
map Super+Shift K swap previous

map Super Period focus-output next            # focus next monitor
map Super Comma focus-output previous         # focus previous monitor
map Super+Shift Period send-to-output next    # send to next monitor
map Super+Shift Comma send-to-output previous # send to previous monitor
map Super Space toggle-float                  # toggle floating

map Super F toggle-fullscreen                      # toggle fullscreen
map Super+Shift 0 set-view-tags $(((1 << 32) - 1)) # pin focused to all tags
map Alt Tab focus-previous-tags                    # toggle between previous tag and current one

map Super+Alt L move right 100 # move floated focused right
map Super+Alt H move left 100  # move floated focused left
map Super+Alt K move up 100    # move floated focused up
map Super+Alt J move down 100  # move floated focused down

map Super+Control L resize horizontal 50  # grow horizontally
map Super+Control H resize horizontal -50 # shrink horizontally
map Super+Control K resize vertical 50    # grow vertically
map Super+Control J resize vertical -50   # shrink vertically

for i in $(seq 1 9); do
  tags=$((1 << ($i - 1)))
  map Super $i set-focused-tags $tags    # focus tag
  map Super+Shift $i set-view-tags $tags # send focused to tag
done

pointer Super BTN_LEFT move-view
pointer Super BTN_RIGHT resize-view
pointer Super BTN_MIDDLE toggle-float

for mode in normal locked; do
  # Eject the optical drive (well if you still have one that is)
  riverctl map $mode None XF86Eject spawn 'eject -T'

  # Control pulse audio volume with pamixer (https://github.com/cdemoulins/pamixer)
  riverctl map $mode None XF86AudioRaiseVolume spawn 'volume --inc'
  riverctl map $mode None XF86AudioLowerVolume spawn 'volume --dec'
  riverctl map $mode None XF86AudioMute spawn 'volume --toggle'

  # Control MPRIS aware media players with mpc (https://github.com/altdesktop/mpc)
  riverctl map $mode None XF86AudioMedia spawn 'mpc play-pause'
  riverctl map $mode None XF86AudioPlay spawn 'mpc play-pause'
  riverctl map $mode None XF86AudioPrev spawn 'mpc previous'
  riverctl map $mode None XF86AudioNext spawn 'mpc next'

  # Control screen backlight brightness with brightnessctl (https://github.com/Hummer12007/brightnessctl)
  riverctl map $mode None XF86MonBrightnessUp spawn 'brightness --inc'
  riverctl map $mode None XF86MonBrightnessDown spawn 'brightness --dec'
done

# Set background and border color

riverctl spawn 'gsettings set org.gnome.desktop.interface gtk-theme "deepin-dark"'
riverctl spawn 'gsettings set org.gnome.desktop.interface icon-theme "Papirus-Dark"' # Sweet-Red/Sweet-Teal
riverctl spawn 'gsettings set org.gnome.desktop.interface cursor-theme "Bibata-Modern-Classic"'
riverctl spawn 'gsettings set org.gnome.desktop.interface font-name "CaskaydiaCove Nerd Font 13"'

# Scratchpads
scratch_tag=$((1 << 20))

riverctl map normal Super Grave toggle-focused-tags ${scratch_tag} # toggle the scratchpad
riverctl map normal Super+Shift Grave set-view-tags ${scratch_tag} # send windows to the scratchpad

# Set spawn tagmask to ensure new windows do not have the scratchpad tag unless explicitly set.
all_but_scratch_tag=$((((1 << 32) - 1) ^ $scratch_tag))
riverctl spawn-tagmask ${all_but_scratch_tag}

float 'python3' 0 900 700 center center

float 'org.pulseaudio.pavucontrol' 0 800 500 center center

float 'org.telegram.desktop' 0 800 500 center center

float 'mpv' 0 800 500 center center

float 'Alacritty' 0 800 500 center center

float 'nwg-look' 0 800 500 center center

float 'goodvibes' 0 400 500 left center
float 'Windscribe' 0 300 300 center center

float 'blueman-manager' 0 800 500 center center

for pad in $(riverctl list-inputs | grep -i touchpad); do
  riverctl input $pad events enabled
  riverctl input $pad tap enabled
done

riverctl default-layout rivertile
exec rivertile -view-padding 2 -outer-padding 2 -main-ratio 0.5 &
